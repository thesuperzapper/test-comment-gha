name: bot approval

on:
  issue_comment:
    types:
      - created

jobs:
  taas_approval:
    # runs-on: [ "self-hosted", "datalake-nonprod-maven11-runner" ]
    if: |
      github.event.issue.pull_request
       && github.event.issue.state == 'open'
       && contains(fromJson('["thesuperzapper", "xxxxxx"]'), github.event.comment.user.login)
       && contains(github.event.comment.body, '/taas-approval')
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
#          ref: refs/pull/${{ github.event.issue.number }}/merge

      - name: Get PR Details
        uses: actions/github-script@v6
        id: get-pr
        with:
          retries: 3
          script: |
            const request = {
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            }
            
            core.info('Attempting to get PR #${request.pull_number} from ${request.owner}/${request.repo}...')
            try {
              const result = await github.pulls.get(request)
              return result.data
            } catch (err) {
              core.setFailed('Request failed with error ${err}')
            }

      - name: Check which files changed
        id: changed-files
        uses: tj-actions/changed-files@v34
        with:
          sha: ${{ fromJSON(steps.get-pr.outputs.result).head.sha }}
          base_sha: ${{ fromJSON(steps.get-pr.outputs.result).base.sha }}
          files: |
            /datalake-nonprod-1/*/taas/source.properties
            /datalake-prod-1/*/taas/source.properties

      - name: Approve PR
        if: steps.changed-files.outputs.only_modified == 'true'
        uses: hmarr/auto-approve-action@v3
        with:
          pull-request-number: ${{ github.event.issue.number }}

      - name: Post Rejection Comment
        if: steps.changed-files.outputs.only_modified != 'true'
        uses: actions/github-script@v6
        with:
          retries: 3
          script: |
            const request = {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: [
                '@${{ github.event.comment.user.login }}, this PR is not eligible for bot-approval.',
                '', 
                'To be eligible, the PR must only modify files matching:',
                ' - `/datalake-nonprod-1/*/taas/source.properties`',
                ' - `/datalake-prod-1/*/taas/source.properties`'
              ].join('\n')
            }
            
            core.info('Attempting to post comment on PR #${request.issue_number} from ${request.owner}/${request.repo}...')
            try {
              const result = await github.rest.issues.createComment(request)
            } catch (err) {
              core.setFailed('Request failed with error ${err}')
            }